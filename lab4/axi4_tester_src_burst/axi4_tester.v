// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 
/* verilator lint_off WIDTHEXPAND */
/* verilator lint_off WIDTHTRUNC */
module axi4_tester (
        ap_clk,
        ap_rst_n,
        m_axi_data_in_out_V_AWVALID,
        m_axi_data_in_out_V_AWREADY,
        m_axi_data_in_out_V_AWADDR,
        m_axi_data_in_out_V_AWID,
        m_axi_data_in_out_V_AWLEN,
        m_axi_data_in_out_V_AWSIZE,
        m_axi_data_in_out_V_AWBURST,
        m_axi_data_in_out_V_AWLOCK,
        m_axi_data_in_out_V_AWCACHE,
        m_axi_data_in_out_V_AWPROT,
        m_axi_data_in_out_V_AWQOS,
        m_axi_data_in_out_V_AWREGION,
        m_axi_data_in_out_V_AWUSER,
        m_axi_data_in_out_V_WVALID,
        m_axi_data_in_out_V_WREADY,
        m_axi_data_in_out_V_WDATA,
        m_axi_data_in_out_V_WSTRB,
        m_axi_data_in_out_V_WLAST,
        m_axi_data_in_out_V_WID,
        m_axi_data_in_out_V_WUSER,
        m_axi_data_in_out_V_ARVALID,
        m_axi_data_in_out_V_ARREADY,
        m_axi_data_in_out_V_ARADDR,
        m_axi_data_in_out_V_ARID,
        m_axi_data_in_out_V_ARLEN,
        m_axi_data_in_out_V_ARSIZE,
        m_axi_data_in_out_V_ARBURST,
        m_axi_data_in_out_V_ARLOCK,
        m_axi_data_in_out_V_ARCACHE,
        m_axi_data_in_out_V_ARPROT,
        m_axi_data_in_out_V_ARQOS,
        m_axi_data_in_out_V_ARREGION,
        m_axi_data_in_out_V_ARUSER,
        m_axi_data_in_out_V_RVALID,
        m_axi_data_in_out_V_RREADY,
        m_axi_data_in_out_V_RDATA,
        m_axi_data_in_out_V_RLAST,
        m_axi_data_in_out_V_RID,
        m_axi_data_in_out_V_RUSER,
        m_axi_data_in_out_V_RRESP,
        m_axi_data_in_out_V_BVALID,
        m_axi_data_in_out_V_BREADY,
        m_axi_data_in_out_V_BRESP,
        m_axi_data_in_out_V_BID,
        m_axi_data_in_out_V_BUSER,
        correct_V,
        correct_V_ap_vld
);

parameter    ap_ST_fsm_state1 = 19'd1;
parameter    ap_ST_fsm_state2 = 19'd2;
parameter    ap_ST_fsm_state3 = 19'd4;
parameter    ap_ST_fsm_state4 = 19'd8;
parameter    ap_ST_fsm_state5 = 19'd16;
parameter    ap_ST_fsm_state6 = 19'd32;
parameter    ap_ST_fsm_state7 = 19'd64;
parameter    ap_ST_fsm_state8 = 19'd128;
parameter    ap_ST_fsm_state9 = 19'd256;
parameter    ap_ST_fsm_state10 = 19'd512;
parameter    ap_ST_fsm_state11 = 19'd1024;
parameter    ap_ST_fsm_state12 = 19'd2048;
parameter    ap_ST_fsm_state13 = 19'd4096;
parameter    ap_ST_fsm_state14 = 19'd8192;
parameter    ap_ST_fsm_state15 = 19'd16384;
parameter    ap_ST_fsm_state16 = 19'd32768;
parameter    ap_ST_fsm_state17 = 19'd65536;
parameter    ap_ST_fsm_state18 = 19'd131072;
parameter    ap_ST_fsm_state19 = 19'd262144;
parameter    C_M_AXI_DATA_IN_OUT_V_ID_WIDTH = 1;
parameter    C_M_AXI_DATA_IN_OUT_V_ADDR_WIDTH = 32;
parameter    C_M_AXI_DATA_IN_OUT_V_DATA_WIDTH = 32;
parameter    C_M_AXI_DATA_IN_OUT_V_AWUSER_WIDTH = 1;
parameter    C_M_AXI_DATA_IN_OUT_V_ARUSER_WIDTH = 1;
parameter    C_M_AXI_DATA_IN_OUT_V_WUSER_WIDTH = 1;
parameter    C_M_AXI_DATA_IN_OUT_V_RUSER_WIDTH = 1;
parameter    C_M_AXI_DATA_IN_OUT_V_BUSER_WIDTH = 1;
parameter    C_M_AXI_DATA_IN_OUT_V_TARGET_ADDR = 0;
parameter    C_M_AXI_DATA_IN_OUT_V_USER_VALUE = 0;
parameter    C_M_AXI_DATA_IN_OUT_V_PROT_VALUE = 0;
parameter    C_M_AXI_DATA_IN_OUT_V_CACHE_VALUE = 3;
parameter    C_M_AXI_DATA_WIDTH = 32;

parameter C_M_AXI_DATA_IN_OUT_V_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
output   m_axi_data_in_out_V_AWVALID;
input   m_axi_data_in_out_V_AWREADY;
output  [C_M_AXI_DATA_IN_OUT_V_ADDR_WIDTH - 1:0] m_axi_data_in_out_V_AWADDR;
output  [C_M_AXI_DATA_IN_OUT_V_ID_WIDTH - 1:0] m_axi_data_in_out_V_AWID;
output  [7:0] m_axi_data_in_out_V_AWLEN;
output  [2:0] m_axi_data_in_out_V_AWSIZE;
output  [1:0] m_axi_data_in_out_V_AWBURST;
output  [1:0] m_axi_data_in_out_V_AWLOCK;
output  [3:0] m_axi_data_in_out_V_AWCACHE;
output  [2:0] m_axi_data_in_out_V_AWPROT;
output  [3:0] m_axi_data_in_out_V_AWQOS;
output  [3:0] m_axi_data_in_out_V_AWREGION;
output  [C_M_AXI_DATA_IN_OUT_V_AWUSER_WIDTH - 1:0] m_axi_data_in_out_V_AWUSER;
output   m_axi_data_in_out_V_WVALID;
input   m_axi_data_in_out_V_WREADY;
output  [C_M_AXI_DATA_IN_OUT_V_DATA_WIDTH - 1:0] m_axi_data_in_out_V_WDATA;
output  [C_M_AXI_DATA_IN_OUT_V_WSTRB_WIDTH - 1:0] m_axi_data_in_out_V_WSTRB;
output   m_axi_data_in_out_V_WLAST;
output  [C_M_AXI_DATA_IN_OUT_V_ID_WIDTH - 1:0] m_axi_data_in_out_V_WID;
output  [C_M_AXI_DATA_IN_OUT_V_WUSER_WIDTH - 1:0] m_axi_data_in_out_V_WUSER;
output   m_axi_data_in_out_V_ARVALID;
input   m_axi_data_in_out_V_ARREADY;
output  [C_M_AXI_DATA_IN_OUT_V_ADDR_WIDTH - 1:0] m_axi_data_in_out_V_ARADDR;
output  [C_M_AXI_DATA_IN_OUT_V_ID_WIDTH - 1:0] m_axi_data_in_out_V_ARID;
output  [7:0] m_axi_data_in_out_V_ARLEN;
output  [2:0] m_axi_data_in_out_V_ARSIZE;
output  [1:0] m_axi_data_in_out_V_ARBURST;
output  [1:0] m_axi_data_in_out_V_ARLOCK;
output  [3:0] m_axi_data_in_out_V_ARCACHE;
output  [2:0] m_axi_data_in_out_V_ARPROT;
output  [3:0] m_axi_data_in_out_V_ARQOS;
output  [3:0] m_axi_data_in_out_V_ARREGION;
output  [C_M_AXI_DATA_IN_OUT_V_ARUSER_WIDTH - 1:0] m_axi_data_in_out_V_ARUSER;
input   m_axi_data_in_out_V_RVALID;
output   m_axi_data_in_out_V_RREADY;
input  [C_M_AXI_DATA_IN_OUT_V_DATA_WIDTH - 1:0] m_axi_data_in_out_V_RDATA;
input   m_axi_data_in_out_V_RLAST;
input  [C_M_AXI_DATA_IN_OUT_V_ID_WIDTH - 1:0] m_axi_data_in_out_V_RID;
input  [C_M_AXI_DATA_IN_OUT_V_RUSER_WIDTH - 1:0] m_axi_data_in_out_V_RUSER;
input  [1:0] m_axi_data_in_out_V_RRESP;
input   m_axi_data_in_out_V_BVALID;
output   m_axi_data_in_out_V_BREADY;
input  [1:0] m_axi_data_in_out_V_BRESP;
input  [C_M_AXI_DATA_IN_OUT_V_ID_WIDTH - 1:0] m_axi_data_in_out_V_BID;
input  [C_M_AXI_DATA_IN_OUT_V_BUSER_WIDTH - 1:0] m_axi_data_in_out_V_BUSER;
output  [0:0] correct_V;
output   correct_V_ap_vld;

reg correct_V_ap_vld;

 reg    ap_rst_n_inv;
reg   [9:0] test_data_V_address0;
reg    test_data_V_ce0;
wire   [31:0] test_data_V_q0;
reg    data_in_out_V_blk_n_AW;
(* fsm_encoding = "none" *) reg   [18:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    data_in_out_V_blk_n_B;
wire    ap_CS_fsm_state8;
reg    data_in_out_V_blk_n_AR;
wire    ap_CS_fsm_state9;
reg    data_in_out_V_blk_n_W;
wire    ap_CS_fsm_state4;
reg    data_in_out_V_blk_n_R;
wire    ap_CS_fsm_state16;
wire   [0:0] icmp_ln18_fu_202_p2;
reg    data_in_out_V_AWVALID;
wire    data_in_out_V_AWREADY;
reg    data_in_out_V_WVALID;
wire    data_in_out_V_WREADY;
reg    data_in_out_V_ARVALID;
wire    data_in_out_V_ARREADY;
wire    data_in_out_V_RVALID;
reg    data_in_out_V_RREADY;
wire   [31:0] data_in_out_V_RDATA;
wire    data_in_out_V_RLAST;
wire   [0:0] data_in_out_V_RID;
wire   [0:0] data_in_out_V_RUSER;
wire   [1:0] data_in_out_V_RRESP;
wire    data_in_out_V_BVALID;
reg    data_in_out_V_BREADY;
wire   [1:0] data_in_out_V_BRESP;
wire   [0:0] data_in_out_V_BID;
wire   [0:0] data_in_out_V_BUSER;
wire   [10:0] i_fu_191_p2;
reg   [10:0] i_reg_246;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln13_fu_185_p2;
reg   [31:0] test_data_V_load_reg_256;
wire    ap_CS_fsm_state3;
wire   [10:0] i_1_fu_208_p2;
reg   [10:0] i_1_reg_264;
reg    ap_block_state16;
reg   [31:0] data_in_out_V_read_reg_269;
wire   [0:0] icmp_ln24_fu_219_p2;
reg   [0:0] icmp_ln24_reg_274;
wire    ap_CS_fsm_state18;
wire   [10:0] i_2_fu_225_p2;
reg   [10:0] i_2_reg_278;
reg   [9:0] data_from_mem_V_address0;
reg    data_from_mem_V_ce0;
reg    data_from_mem_V_we0;
wire   [31:0] data_from_mem_V_q0;
reg   [10:0] i_0_reg_138;
reg   [10:0] i1_0_reg_149;
wire    ap_CS_fsm_state17;
wire    ap_CS_fsm_state15;
reg   [10:0] i2_0_reg_161;
wire    ap_CS_fsm_state19;
wire   [0:0] icmp_ln883_fu_237_p2;
reg   [0:0] ap_phi_mux_storemerge_phi_fu_176_p4;
reg   [0:0] storemerge_reg_172;
wire   [63:0] zext_ln15_fu_197_p1;
wire   [63:0] zext_ln20_fu_214_p1;
wire   [63:0] zext_ln26_fu_231_p1;
reg   [18:0] ap_NS_fsm;

// power-on initialization
initial begin
    ap_CS_fsm = 19'd1;
end

axi4_tester_test_data_V #(
    .DataWidth( 32 ),
    .AddressRange( 1024 ),
    .AddressWidth( 10 ))
test_data_V_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(test_data_V_address0),
    .ce0(test_data_V_ce0),
    .q0(test_data_V_q0)
);

axi4_tester_data_in_out_V_m_axi #(
    .CONSERVATIVE( 0 ),
    .USER_DW( 32 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_DATA_IN_OUT_V_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_DATA_IN_OUT_V_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_DATA_IN_OUT_V_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_DATA_IN_OUT_V_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_DATA_IN_OUT_V_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_DATA_IN_OUT_V_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_DATA_IN_OUT_V_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_DATA_IN_OUT_V_BUSER_WIDTH ),
    .C_TARGET_ADDR( C_M_AXI_DATA_IN_OUT_V_TARGET_ADDR ),
    .C_USER_VALUE( C_M_AXI_DATA_IN_OUT_V_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_DATA_IN_OUT_V_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_DATA_IN_OUT_V_CACHE_VALUE ))
axi4_tester_data_in_out_V_m_axi_U(
    .AWVALID(m_axi_data_in_out_V_AWVALID),
    .AWREADY(m_axi_data_in_out_V_AWREADY),
    .AWADDR(m_axi_data_in_out_V_AWADDR),
    .AWID(m_axi_data_in_out_V_AWID),
    .AWLEN(m_axi_data_in_out_V_AWLEN),
    .AWSIZE(m_axi_data_in_out_V_AWSIZE),
    .AWBURST(m_axi_data_in_out_V_AWBURST),
    .AWLOCK(m_axi_data_in_out_V_AWLOCK),
    .AWCACHE(m_axi_data_in_out_V_AWCACHE),
    .AWPROT(m_axi_data_in_out_V_AWPROT),
    .AWQOS(m_axi_data_in_out_V_AWQOS),
    .AWREGION(m_axi_data_in_out_V_AWREGION),
    .AWUSER(m_axi_data_in_out_V_AWUSER),
    .WVALID(m_axi_data_in_out_V_WVALID),
    .WREADY(m_axi_data_in_out_V_WREADY),
    .WDATA(m_axi_data_in_out_V_WDATA),
    .WSTRB(m_axi_data_in_out_V_WSTRB),
    .WLAST(m_axi_data_in_out_V_WLAST),
    .WID(m_axi_data_in_out_V_WID),
    .WUSER(m_axi_data_in_out_V_WUSER),
    .ARVALID(m_axi_data_in_out_V_ARVALID),
    .ARREADY(m_axi_data_in_out_V_ARREADY),
    .ARADDR(m_axi_data_in_out_V_ARADDR),
    .ARID(m_axi_data_in_out_V_ARID),
    .ARLEN(m_axi_data_in_out_V_ARLEN),
    .ARSIZE(m_axi_data_in_out_V_ARSIZE),
    .ARBURST(m_axi_data_in_out_V_ARBURST),
    .ARLOCK(m_axi_data_in_out_V_ARLOCK),
    .ARCACHE(m_axi_data_in_out_V_ARCACHE),
    .ARPROT(m_axi_data_in_out_V_ARPROT),
    .ARQOS(m_axi_data_in_out_V_ARQOS),
    .ARREGION(m_axi_data_in_out_V_ARREGION),
    .ARUSER(m_axi_data_in_out_V_ARUSER),
    .RVALID(m_axi_data_in_out_V_RVALID),
    .RREADY(m_axi_data_in_out_V_RREADY),
    .RDATA(m_axi_data_in_out_V_RDATA),
    .RLAST(m_axi_data_in_out_V_RLAST),
    .RID(m_axi_data_in_out_V_RID),
    .RUSER(m_axi_data_in_out_V_RUSER),
    .RRESP(m_axi_data_in_out_V_RRESP),
    .BVALID(m_axi_data_in_out_V_BVALID),
    .BREADY(m_axi_data_in_out_V_BREADY),
    .BRESP(m_axi_data_in_out_V_BRESP),
    .BID(m_axi_data_in_out_V_BID),
    .BUSER(m_axi_data_in_out_V_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(data_in_out_V_ARVALID),
    .I_ARREADY(data_in_out_V_ARREADY),
    .I_ARADDR(32'd0),
    .I_ARID(1'd0),
    .I_ARLEN(32'd1024),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(data_in_out_V_RVALID),
    .I_RREADY(data_in_out_V_RREADY),
    .I_RDATA(data_in_out_V_RDATA),
    .I_RID(data_in_out_V_RID),
    .I_RUSER(data_in_out_V_RUSER),
    .I_RRESP(data_in_out_V_RRESP),
    .I_RLAST(data_in_out_V_RLAST),
    .I_AWVALID(data_in_out_V_AWVALID),
    .I_AWREADY(data_in_out_V_AWREADY),
    .I_AWADDR(32'd0),
    .I_AWID(1'd0),
    .I_AWLEN(32'd1024),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(data_in_out_V_WVALID),
    .I_WREADY(data_in_out_V_WREADY),
    .I_WDATA(test_data_V_load_reg_256),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(4'd15),
    .I_BVALID(data_in_out_V_BVALID),
    .I_BREADY(data_in_out_V_BREADY),
    .I_BRESP(data_in_out_V_BRESP),
    .I_BID(data_in_out_V_BID),
    .I_BUSER(data_in_out_V_BUSER)
);

axi4_tester_data_from_mem_V #(
    .DataWidth( 32 ),
    .AddressRange( 1024 ),
    .AddressWidth( 10 ))
data_from_mem_V_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(data_from_mem_V_address0),
    .ce0(data_from_mem_V_ce0),
    .we0(data_from_mem_V_we0),
    .d0(data_in_out_V_read_reg_269),
    .q0(data_from_mem_V_q0)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        i1_0_reg_149 <= 11'd0;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        i1_0_reg_149 <= i_1_reg_264;
    end
end

always @ (posedge ap_clk) begin
    if ((~((data_in_out_V_RVALID == 1'b0) & (icmp_ln18_fu_202_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state16) & (icmp_ln18_fu_202_p2 == 1'd1))) begin
        i2_0_reg_161 <= 11'd0;
    end else if (((icmp_ln883_fu_237_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state19) & (icmp_ln24_reg_274 == 1'd0))) begin
        i2_0_reg_161 <= i_2_reg_278;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (data_in_out_V_AWREADY == 1'b1))) begin
        i_0_reg_138 <= 11'd0;
    end else if (((1'b1 == ap_CS_fsm_state4) & (data_in_out_V_WREADY == 1'b1))) begin
        i_0_reg_138 <= i_reg_246;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln24_fu_219_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state18))) begin
        storemerge_reg_172 <= 1'd1;
    end else if (((1'b1 == ap_CS_fsm_state19) & (icmp_ln883_fu_237_p2 == 1'd0) & (icmp_ln24_reg_274 == 1'd0))) begin
        storemerge_reg_172 <= 1'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((~((data_in_out_V_RVALID == 1'b0) & (icmp_ln18_fu_202_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state16) & (icmp_ln18_fu_202_p2 == 1'd0))) begin
        data_in_out_V_read_reg_269 <= data_in_out_V_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((~((data_in_out_V_RVALID == 1'b0) & (icmp_ln18_fu_202_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state16))) begin
        i_1_reg_264 <= i_1_fu_208_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        i_2_reg_278 <= i_2_fu_225_p2;
        icmp_ln24_reg_274 <= icmp_ln24_fu_219_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_reg_246 <= i_fu_191_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        test_data_V_load_reg_256 <= test_data_V_q0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state19) & (icmp_ln883_fu_237_p2 == 1'd0) & (icmp_ln24_reg_274 == 1'd0))) begin
        ap_phi_mux_storemerge_phi_fu_176_p4 = 1'd0;
    end else begin
        ap_phi_mux_storemerge_phi_fu_176_p4 = storemerge_reg_172;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state19) & ((icmp_ln24_reg_274 == 1'd1) | (icmp_ln883_fu_237_p2 == 1'd0)))) begin
        correct_V_ap_vld = 1'b1;
    end else begin
        correct_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        data_from_mem_V_address0 = zext_ln26_fu_231_p1;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        data_from_mem_V_address0 = zext_ln20_fu_214_p1;
    end else begin
        data_from_mem_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state18))) begin
        data_from_mem_V_ce0 = 1'b1;
    end else begin
        data_from_mem_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        data_from_mem_V_we0 = 1'b1;
    end else begin
        data_from_mem_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) & (data_in_out_V_ARREADY == 1'b1))) begin
        data_in_out_V_ARVALID = 1'b1;
    end else begin
        data_in_out_V_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (data_in_out_V_AWREADY == 1'b1))) begin
        data_in_out_V_AWVALID = 1'b1;
    end else begin
        data_in_out_V_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) & (data_in_out_V_BVALID == 1'b1))) begin
        data_in_out_V_BREADY = 1'b1;
    end else begin
        data_in_out_V_BREADY = 1'b0;
    end
end

always @ (*) begin
    if ((~((data_in_out_V_RVALID == 1'b0) & (icmp_ln18_fu_202_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state16) & (icmp_ln18_fu_202_p2 == 1'd0))) begin
        data_in_out_V_RREADY = 1'b1;
    end else begin
        data_in_out_V_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) & (data_in_out_V_WREADY == 1'b1))) begin
        data_in_out_V_WVALID = 1'b1;
    end else begin
        data_in_out_V_WVALID = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        data_in_out_V_blk_n_AR = m_axi_data_in_out_V_ARREADY;
    end else begin
        data_in_out_V_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        data_in_out_V_blk_n_AW = m_axi_data_in_out_V_AWREADY;
    end else begin
        data_in_out_V_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        data_in_out_V_blk_n_B = m_axi_data_in_out_V_BVALID;
    end else begin
        data_in_out_V_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state16) & (icmp_ln18_fu_202_p2 == 1'd0))) begin
        data_in_out_V_blk_n_R = m_axi_data_in_out_V_RVALID;
    end else begin
        data_in_out_V_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        data_in_out_V_blk_n_W = m_axi_data_in_out_V_WREADY;
    end else begin
        data_in_out_V_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        test_data_V_address0 = zext_ln26_fu_231_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        test_data_V_address0 = zext_ln15_fu_197_p1;
    end else begin
        test_data_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state2))) begin
        test_data_V_ce0 = 1'b1;
    end else begin
        test_data_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (data_in_out_V_AWREADY == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln13_fu_185_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (data_in_out_V_WREADY == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            if (((1'b1 == ap_CS_fsm_state8) & (data_in_out_V_BVALID == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state9 : begin
            if (((1'b1 == ap_CS_fsm_state9) & (data_in_out_V_ARREADY == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            if ((~((data_in_out_V_RVALID == 1'b0) & (icmp_ln18_fu_202_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state16) & (icmp_ln18_fu_202_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end else if ((~((data_in_out_V_RVALID == 1'b0) & (icmp_ln18_fu_202_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state16) & (icmp_ln18_fu_202_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            if (((1'b1 == ap_CS_fsm_state19) & ((icmp_ln24_reg_274 == 1'd1) | (icmp_ln883_fu_237_p2 == 1'd0)))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_block_state16 = ((data_in_out_V_RVALID == 1'b0) & (icmp_ln18_fu_202_p2 == 1'd0));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign correct_V = ap_phi_mux_storemerge_phi_fu_176_p4;

assign i_1_fu_208_p2 = (i1_0_reg_149 + 11'd1);

assign i_2_fu_225_p2 = (i2_0_reg_161 + 11'd1);

assign i_fu_191_p2 = (i_0_reg_138 + 11'd1);

assign icmp_ln13_fu_185_p2 = ((i_0_reg_138 == 11'd1024) ? 1'b1 : 1'b0);

assign icmp_ln18_fu_202_p2 = ((i1_0_reg_149 == 11'd1024) ? 1'b1 : 1'b0);

assign icmp_ln24_fu_219_p2 = ((i2_0_reg_161 == 11'd1024) ? 1'b1 : 1'b0);

assign icmp_ln883_fu_237_p2 = ((data_from_mem_V_q0 == test_data_V_q0) ? 1'b1 : 1'b0);

assign zext_ln15_fu_197_p1 = i_0_reg_138;

assign zext_ln20_fu_214_p1 = i1_0_reg_149;

assign zext_ln26_fu_231_p1 = i2_0_reg_161;

endmodule //axi4_tester
